# File: merged_app.py
import streamlit as st
import pandas as pd
from utils.dual_db import get_connection, db_manager, backup_now, get_backup_status, test_server_connection
import datetime
import openpyxl
from openpyxl import Workbook
from openpyxl.styles import Font, Border, Side, Alignment, PatternFill
from openpyxl.drawing.image import Image as XLImage
import io
from io import BytesIO
import os
from decimal import Decimal
from dotenv import load_dotenv
from PIL import Image
from num2words import num2words
import re

st.set_page_config(page_title="BOQ & PO Management System", layout="wide")

# Add backup status at the top
col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
with col1:
    st.title("üì¶ BOQ & Purchase Order Management System")
with col2:
    if st.button("üíæ Manual Backup"):
        with st.spinner("Creating backup..."):
            backup_now()
        st.success("‚úÖ Backup completed!")
        st.rerun()
with col3:
    if st.button("üìä Backup Status"):
        status = get_backup_status()
        st.info(f"Desktop: {status['desktop_files']} files\nServer: {status['server_files']} files\nStatus: {status['server_status']}")
with col4:
    if st.button("üîó Test Server"):
        if test_server_connection():
            st.success("‚úÖ Server OK")
        else:
            st.error("‚ùå Server Error")

# Load environment variables
load_dotenv()

# Get DB connection
conn = get_connection()
cursor = conn.cursor()

# Create suppliers table if not exists
def create_suppliers_table():
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS suppliers (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            address TEXT,
            gst_number VARCHAR(50),
            contact_person VARCHAR(255),
            contact_number VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()

# Create bill_to_companies table if not exists
def create_bill_to_table():
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS bill_to_companies (
            id SERIAL PRIMARY KEY,
            company_name VARCHAR(255) NOT NULL,
            address TEXT,
            gst_number VARCHAR(50),
            contact_person VARCHAR(255),
            contact_number VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()

# Create ship_to_addresses table if not exists
def create_ship_to_table():
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS ship_to_addresses (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            address TEXT,
            gst_number VARCHAR(50),
            contact_person VARCHAR(255),
            contact_number VARCHAR(255),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()

# Create locations table for PO number generation
def create_locations_table():
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS locations (
            id SERIAL PRIMARY KEY,
            location_code VARCHAR(10) NOT NULL UNIQUE,
            location_name VARCHAR(255) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()

# Create po_counters table for tracking serial numbers
def create_po_counters_table():
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS po_counters (
            id SERIAL PRIMARY KEY,
            location_code VARCHAR(10) NOT NULL,
            last_serial_number INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(location_code)
        )
    """)
    conn.commit()

# Initialize suppliers database with predefined data
def initialize_suppliers():
    # Check if suppliers already exist
    cursor.execute("SELECT COUNT(*) FROM suppliers")
    count = cursor.fetchone()[0]
    
    if count == 0:  # Only insert if table is empty
        suppliers_data = [
            (
                "SRK Trading Company",
                "2nd Floor, Front Side, Gali No- 23, 357/A, Khasra No- 643/2, Pandit Muhalla, Mandawali",
                "",
                "Mr. Rajkumar, Anuj",
                "91-9560114107, 91-9810529008"
            ),
            (
                "4 Squares Corporation",
                "15TH MAIN, HBR LAYOUT BANGALORE, Karnataka - 560043",
                "29AAAFZ7997B1ZL",
                "Mr. Tijo George, Anuj Kumar",
                "91-9560114107, 9-97420 02555"
            ),
            (
                "Wave Enterprise",
                "222, GALA HUB, Near Honest Restaurant, Gala Gymkhana Road, South Bopal, Ahmedabad - 380058",
                "24ECSPM2013M1ZD",
                "Anuj Kumar",
                "91-9560114107, 91-7874063796"
            ),
            (
                "SPARK TECHNOLOGIES PRIVATE LIMITED",
                "56 Nehru Place, 308-309, Eros Apartment NEW DELHI Delhi - 110019",
                "07AAACS4609L1Z8",
                "Mr. Virat, Anuj Kumar",
                "91-9560114107, 91 98182 28701"
            ),
            (
                "SUPERTRON ELECTRONICS PRIVATE LIMITED",
                "SUPERTRON HOUSE, 2 COOPER LANE, COOPER LANE, Kolkata, West Bengal, 700001",
                "07AADCS5971L1ZU",
                "Mr. Jagdish, Mr. Anuj Kumar",
                "91-9560114107, 91-9891289203"
            ),
            (
                "SS INFOTECH",
                "First Floor Bajaj House 106A, 97 Nehru Place Flyover, Sona Sweets, New Delhi- 110019",
                "07GXPPS8415D1ZY",
                "Mr. Sahil, Mr. Anuj Kumar",
                "91-9560114107"
            )
        ]
        
        for supplier in suppliers_data:
            cursor.execute("""
                INSERT INTO suppliers (name, address, gst_number, contact_person, contact_number)
                VALUES (%s, %s, %s, %s, %s)
            """, supplier)
        conn.commit()
        
        # BACKUP AFTER INITIALIZATION
        db_manager.backup_table('suppliers')
        st.success("‚úÖ Supplier database initialized with 6 predefined suppliers!")

# Initialize bill_to_companies database with predefined data
def initialize_bill_to_companies():
    # Check if bill_to_companies already exist
    cursor.execute("SELECT COUNT(*) FROM bill_to_companies")
    count = cursor.fetchone()[0]
    
    if count == 0:  # Only insert if table is empty
        bill_to_data = [
            (
                "Zerone Technologies Pvt Ltd",
                "R/O No-350,Rajpur Khurd Extension,Near Zara Farm House Chhatapur, New Delhi 110074",
                "07AAACZ5805D1ZI",
                "",
                ""
            ),
            (
                "QuantumInnovation Pvt Ltd",
                "123 Innovation Road, Pondicherry",
                "29ABCDE1234F2Z5",
                "",
                ""
            )
        ]
        
        for company in bill_to_data:
            cursor.execute("""
                INSERT INTO bill_to_companies (company_name, address, gst_number, contact_person, contact_number)
                VALUES (%s, %s, %s, %s, %s)
            """, company)
        conn.commit()
        
        # BACKUP AFTER INITIALIZATION
        db_manager.backup_table('bill_to_companies')
        st.success("‚úÖ Bill To companies database initialized!")

# Initialize ship_to_addresses database with predefined data
def initialize_ship_to_addresses():
    # Check if ship_to_addresses already exist
    cursor.execute("SELECT COUNT(*) FROM ship_to_addresses")
    count = cursor.fetchone()[0]
    
    if count == 0:  # Only insert if table is empty
        ship_to_data = [
            (
                "Zerone Technologies Pvt Ltd",
                "Tata Projects Limited_ANANT UNIV.ANANT NATIONAL UNIVERSITYSANSKARDHAM CAMPUS, BOPAL-GUMASANAND ROAD AHMEDABAD Gujarat - 382115",
                "24AAACT4119L1Z",
                "",
                "91 89745 15576"
            ),
            (
                "Mr. Dinesh",
                "45 Delivery Lane, Bangalore",
                "33XYZ7890K2",
                "Mr. Dinesh",
                "+91-9123456789"
            )
        ]
        
        for address in ship_to_data:
            cursor.execute("""
                INSERT INTO ship_to_addresses (name, address, gst_number, contact_person, contact_number)
                VALUES (%s, %s, %s, %s, %s)
            """, address)
        conn.commit()
        
        # BACKUP AFTER INITIALIZATION
        db_manager.backup_table('ship_to_addresses')
        st.success("‚úÖ Ship To addresses database initialized!")

# Initialize locations database with predefined data
def initialize_locations():
    # Check if locations already exist
    cursor.execute("SELECT COUNT(*) FROM locations")
    count = cursor.fetchone()[0]
    
    if count == 0:  # Only insert if table is empty
        locations_data = [
            ("HR", "Haryana"),
            ("DL", "Delhi"),
            ("PN", "Pune")
        ]
        
        for location_code, location_name in locations_data:
            cursor.execute("""
                INSERT INTO locations (location_code, location_name)
                VALUES (%s, %s)
            """, (location_code, location_name))
        conn.commit()
        
        # BACKUP AFTER INITIALIZATION
        db_manager.backup_table('locations')
        st.success("‚úÖ Locations database initialized with HR, DL, PN!")

# Initialize PO counters for existing locations
def initialize_po_counters():
    # Get all existing locations
    cursor.execute("SELECT location_code FROM locations")
    locations = cursor.fetchall()
    
    for (location_code,) in locations:
        # Check if counter exists for this location
        cursor.execute("SELECT COUNT(*) FROM po_counters WHERE location_code = %s", (location_code,))
        exists = cursor.fetchone()[0]
        
        if exists == 0:
            # Initialize counter to 0
            cursor.execute("""
                INSERT INTO po_counters (location_code, last_serial_number)
                VALUES (%s, %s)
            """, (location_code, 0))
    
    conn.commit()
    # BACKUP AFTER INITIALIZATION
    db_manager.backup_table('po_counters')

# Create and initialize tables
create_suppliers_table()
initialize_suppliers()
create_bill_to_table()
initialize_bill_to_companies()
create_ship_to_table()
initialize_ship_to_addresses()
create_locations_table()
initialize_locations()
create_po_counters_table()
initialize_po_counters()

# Helper function to get all suppliers
def get_all_suppliers():
    cursor.execute("SELECT id, name, address, gst_number, contact_person, contact_number FROM suppliers ORDER BY name")
    return cursor.fetchall()

# Helper function to get all bill_to_companies
def get_all_bill_to_companies():
    cursor.execute("SELECT id, company_name, address, gst_number, contact_person, contact_number FROM bill_to_companies ORDER BY company_name")
    return cursor.fetchall()

# Helper function to get all ship_to_addresses
def get_all_ship_to_addresses():
    cursor.execute("SELECT id, name, address, gst_number, contact_person, contact_number FROM ship_to_addresses ORDER BY name")
    return cursor.fetchall()

# Helper function to get all locations
def get_all_locations():
    cursor.execute("SELECT location_code, location_name FROM locations ORDER BY location_name")
    return cursor.fetchall()

# Helper function to get current Indian Financial Year
def get_current_financial_year():
    """Get current Indian Financial Year in 2K25-2K26 format"""
    from datetime import datetime
    today = datetime.now()
    
    # Indian FY runs from April to March
    if today.month >= 4:  # April to December
        fy_start = today.year
        fy_end = today.year + 1
    else:  # January to March
        fy_start = today.year - 1
        fy_end = today.year
    
    return f"2K{str(fy_start)[-2:]}-2K{str(fy_end)[-2:]}"

# Helper function to generate next PO number
def generate_po_number(location_code):
    """Generate next PO number for given location"""
    # Get current financial year
    fy_year = get_current_financial_year()
    
    # Get and increment counter for this location
    cursor.execute("SELECT last_serial_number FROM po_counters WHERE location_code = %s", (location_code,))
    result = cursor.fetchone()
    
    if result:
        current_serial = result[0]
        next_serial = current_serial + 1
        
        # Update the counter
        cursor.execute("""
            UPDATE po_counters 
            SET last_serial_number = %s, updated_at = CURRENT_TIMESTAMP 
            WHERE location_code = %s
        """, (next_serial, location_code))
        conn.commit()
        
        # BACKUP AFTER PO COUNTER UPDATE
        db_manager.backup_table('po_counters')
    else:
        # If location doesn't exist in counters, create it
        next_serial = 1
        cursor.execute("""
            INSERT INTO po_counters (location_code, last_serial_number)
            VALUES (%s, %s)
        """, (location_code, next_serial))
        conn.commit()
        
        # BACKUP AFTER PO COUNTER UPDATE
        db_manager.backup_table('po_counters')
    
    # Format: ZTPL-HR/2K25-2K26-001
    po_number = f"ZTPL-{location_code}/{fy_year}-{next_serial:03d}"
    return po_number

# Helper function to clean numeric values
def clean_numeric(value):
    """Clean numeric values from strings with commas, spaces, etc."""
    if pd.isna(value) or value == '':
        return 0
    if isinstance(value, (int, float)):
        return float(value)
    # Convert to string and remove commas, spaces, and other non-numeric characters
    cleaned = str(value).replace(',', '').replace(' ', '')
    # Extract numeric part using regex
    match = re.search(r'[\d.]+', cleaned)
    if match:
        return float(match.group())
    return 0

# Create tabs for different functionalities
tab1, tab2, tab3, tab4 = st.tabs(["üì§ BOQ Management", "üìã View BOQ Items", "üìÑ Generate Purchase Order", "üë• Manage Companies"])

# TAB 1: BOQ Management (Upload and Create Projects)
with tab1:
    st.subheader("üì§ Upload BOQ Excel/CSV & Create Project")
    
    project_name = st.text_input("Enter New Project Name")
    uploaded_file = st.file_uploader("Upload BOQ File", type=["xlsx", "xlsm", "csv"])
    
    if project_name and uploaded_file and st.button("üöÄ Upload & Save BOQ"):
        try:
            # Read file based on extension
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else:
                # For Excel files, try to read from the sheet that contains the actual data
                # First, try to read all sheets to find the right one
                excel_sheets = pd.read_excel(uploaded_file, sheet_name=None)
                
                # Look for the sheet with BOQ data (has BOQ Ref column)
                target_sheet = None
                for sheet_name, sheet_df in excel_sheets.items():
                    if not sheet_df.empty and 'BOQ Ref' in sheet_df.columns:
                        target_sheet = sheet_name
                        df = sheet_df
                        break
                
                # If no sheet found with BOQ Ref, try the sheet with project name
                if target_sheet is None:
                    for sheet_name, sheet_df in excel_sheets.items():
                        if 'PROJECT' in sheet_name.upper() or 'BOQ' in sheet_name.upper():
                            target_sheet = sheet_name
                            df = sheet_df
                            break
                
                # If still no sheet found, use the first sheet
                if target_sheet is None:
                    target_sheet = list(excel_sheets.keys())[0]
                    df = excel_sheets[target_sheet]
                
                st.info(f"üìä Reading data from sheet: *{target_sheet}*")
            
            st.write("üìä *File columns detected:*")
            for i, col in enumerate(df.columns):
                st.write(f"  {i+1}. '{col}' (type: {type(col)._name_})")
            
            # Map actual column names to expected names - improved mapping
            column_mapping = {
                # Direct matches for your Excel file
                'BOQ Ref': 'boq_ref',
                'Description': 'description',
                'Make': 'make',
                'Model': 'model',
                'Unit': 'unit',
                'BOQ Qty.': 'boq_qty',
                'Rate': 'rate',
                'Amount': 'amount',
                'Delivered Qty-1\r\nDC/PO#': 'delivered_qty_1',
                'Delivered Qty-2': 'delivered_qty_2',
                'Delivered Qty-3': 'delivered_qty_3',
                'Delivered Qty-4': 'delivered_qty_4',
                'Delivered Qty-5': 'delivered_qty_5',
                'Delivered Qty-6': 'delivered_qty_6',
                'Delivered Qty-7': 'delivered_qty_7',
                'Delivered Qty-8': 'delivered_qty_8',
                'Delivered Qty-9': 'delivered_qty_9',
                'Delivered Qty-10': 'delivered_qty_10',
                'Total delivered Qty': 'total_delivery_qty',
                'Balance to Deliver': 'balance_to_deliver',
                # Alternative mappings
                'boq ref': 'boq_ref',
                'boq_ref': 'boq_ref',
                'description': 'description',
                'make': 'make',
                'model': 'model',
                'unit': 'unit',
                'BOQ Qty': 'boq_qty',
                'boq qty': 'boq_qty',
                'boq_qty': 'boq_qty',
                'qty': 'boq_qty',
                ' Rate ': 'rate',
                'rate': 'rate',
                ' Amount ': 'amount',
                'amount': 'amount',
                'Delivered Qty-1': 'delivered_qty_1',
                'delivered_qty_1': 'delivered_qty_1',
                'total_delivery_qty': 'total_delivery_qty',
                'balance_to_deliver': 'balance_to_deliver'
            }
            
            # Find matching columns with exact matches first
            matched_columns = {}
            
            # Debug: Show what columns we're trying to match
            st.write("üîç *Attempting to match columns:*")
            
            # First try exact matches
            for actual_col in df.columns:
                actual_col_str = str(actual_col).strip()
                if actual_col_str in column_mapping:
                    matched_columns[actual_col] = column_mapping[actual_col_str]
                    st.write(f"  ‚úÖ '{actual_col}' ‚Üí '{column_mapping[actual_col_str]}'")
            
            # Manual mapping for the specific columns we know exist
            manual_mapping = {
                'BOQ Ref': 'boq_ref',
                'Description': 'description', 
                'Make': 'make',
                'Model': 'model',
                'Unit': 'unit',
                'BOQ Qty.': 'boq_qty',
                'Rate': 'rate',
                'Amount': 'amount'
            }
            
            # Apply manual mapping
            for actual_col in df.columns:
                actual_col_str = str(actual_col).strip()
                if actual_col_str in manual_mapping and actual_col not in matched_columns:
                    matched_columns[actual_col] = manual_mapping[actual_col_str]
                    st.write(f"  ‚úÖ MANUAL: '{actual_col}' ‚Üí '{manual_mapping[actual_col_str]}'")
            
            # Handle delivery quantity columns
            for actual_col in df.columns:
                actual_col_str = str(actual_col).strip()
                if 'Delivered Qty-' in actual_col_str:
                    # Extract the number
                    import re
                    match = re.search(r'Delivered Qty-(\d+)', actual_col_str)
                    if match:
                        num = match.group(1)
                        target_col = f'delivered_qty_{num}'
                        if actual_col not in matched_columns:
                            matched_columns[actual_col] = target_col
                            st.write(f"  ‚úÖ DELIVERY: '{actual_col}' ‚Üí '{target_col}'")
            
            # Handle remaining columns
            remaining_mappings = {
                'Total delivered Qty': 'total_delivery_qty',
                'Balance to Deliver': 'balance_to_deliver'
            }
            
            for actual_col in df.columns:
                actual_col_str = str(actual_col).strip()
                if actual_col_str in remaining_mappings and actual_col not in matched_columns:
                    matched_columns[actual_col] = remaining_mappings[actual_col_str]
                    st.write(f"  ‚úÖ REMAINING: '{actual_col}' ‚Üí '{remaining_mappings[actual_col_str]}'")
            
            st.write("üîó *Final column mapping:*", matched_columns)
            
            # Rename columns
            df = df.rename(columns=matched_columns)
            
            # Check if we have minimum required columns
            minimum_required = ['boq_ref', 'description', 'unit', 'boq_qty', 'rate']
            missing_cols = [col for col in minimum_required if col not in df.columns]
            
            if missing_cols:
                st.error(f"‚ùå Missing required columns: {missing_cols}")
                st.write("Available columns:", list(df.columns))
            else:
                # Fill missing columns with defaults
                for col in ['make', 'model']:
                    if col not in df.columns:
                        df[col] = 'N/A'
                
                # Create delivery quantity columns if they don't exist
                for i in range(1, 11):
                    col_name = f'delivered_qty_{i}'
                    if col_name not in df.columns:
                        df[col_name] = 0
                
                # Clean and convert numeric columns
                df['boq_qty'] = df['boq_qty'].apply(clean_numeric)
                df['rate'] = df['rate'].apply(clean_numeric)
                
                # Calculate amount if not present or clean existing amount
                if 'amount' not in df.columns:
                    df['amount'] = df['boq_qty'] * df['rate']
                else:
                    df['amount'] = df['amount'].apply(clean_numeric)
                
                # Clean delivery quantities
                for i in range(1, 11):
                    col_name = f'delivered_qty_{i}'
                    df[col_name] = df[col_name].apply(clean_numeric)
                
                # Calculate totals
                df['total_delivery_qty'] = df[[f'delivered_qty_{i}' for i in range(1, 11)]].sum(axis=1)
                df['balance_to_deliver'] = df['boq_qty'] - df['total_delivery_qty']
                
                # Fill any remaining NaN values
                df = df.fillna(0)
                
                # Insert project
                cursor.execute("INSERT INTO projects (name) VALUES (%s) RETURNING id", (project_name,))
                project_id = cursor.fetchone()[0]
                
                # Insert BOQ items
                success_count = 0
                error_count = 0
                
                for idx, row in df.iterrows():
                    try:
                        cursor.execute("""
                            INSERT INTO boq_items (
                                project_id, boq_ref, description, make, model, unit, boq_qty, rate, amount,
                                delivered_qty_1, delivered_qty_2, delivered_qty_3, delivered_qty_4, delivered_qty_5,
                                delivered_qty_6, delivered_qty_7, delivered_qty_8, delivered_qty_9, delivered_qty_10,
                                total_delivery_qty, balance_to_deliver
                            ) VALUES (
                                %s, %s, %s, %s, %s, %s, %s, %s, %s,
                                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                                %s, %s
                            )
                        """, (
                            project_id,
                            str(row['boq_ref']), str(row['description']), str(row['make']), str(row['model']), str(row['unit']),
                            float(row['boq_qty']), float(row['rate']), float(row['amount']),
                            float(row['delivered_qty_1']), float(row['delivered_qty_2']), float(row['delivered_qty_3']),
                            float(row['delivered_qty_4']), float(row['delivered_qty_5']), float(row['delivered_qty_6']),
                            float(row['delivered_qty_7']), float(row['delivered_qty_8']), float(row['delivered_qty_9']),
                            float(row['delivered_qty_10']), float(row['total_delivery_qty']), float(row['balance_to_deliver'])
                        ))
                        success_count += 1
                    except Exception as e:
                        error_count += 1
                        st.write(f"Error in row {idx}: {str(e)}")
                
                conn.commit()
                
                # ‚úÖ BACKUP AFTER BOQ UPLOAD
                db_manager.backup_table('projects')
                db_manager.backup_table('boq_items')
                
                st.success(f"‚úÖ BOQ uploaded successfully! {success_count} items inserted, {error_count} errors.")
                
                # Show preview of processed data
                st.subheader("üìã Preview of Processed Data")
                st.dataframe(df.head(10))
                
        except Exception as e:
            st.error(f"‚ùå Error while uploading BOQ: {str(e)}")
            st.write("Please check your file format and try again.")

# TAB 2: View BOQ Items
with tab2:
    st.subheader("üìã View BOQ Items for Existing Project")
    cursor.execute("SELECT id, name FROM projects ORDER BY id DESC")
    projects = cursor.fetchall()

    if projects:
        project_options = {name: pid for pid, name in projects}
        selected_project = st.selectbox("Select a Project to View BOQ", list(project_options.keys()))

        if selected_project:
            project_id = project_options[selected_project]
            
            col1, col2 = st.columns([3, 1])
            with col2:
                if st.button("üóë Delete This Project"):
                    cursor.execute("DELETE FROM projects WHERE id = %s", (project_id,))
                    conn.commit()
                    
                    # ‚úÖ BACKUP AFTER PROJECT DELETE
                    db_manager.backup_table('projects')
                    db_manager.backup_table('boq_items')
                    
                    st.success("‚úÖ Project and its BOQ items deleted.")
                    st.rerun()
            
            cursor.execute("SELECT * FROM boq_items WHERE project_id = %s", (project_id,))
            records = cursor.fetchall()
            columns = [desc[0] for desc in cursor.description]

            boq_df = pd.DataFrame(records, columns=columns)

            if not boq_df.empty:
                st.subheader("üîç Search in BOQ Table")
                search_term = st.text_input("Search by Description, Make, or Model")
                if search_term:
                    mask = boq_df["description"].astype(str).str.contains(search_term, case=False) | \
                           boq_df["make"].astype(str).str.contains(search_term, case=False) | \
                           boq_df["model"].astype(str).str.contains(search_term, case=False)
                    filtered_df = boq_df[mask]
                    st.dataframe(filtered_df, use_container_width=True)
                else:
                    st.dataframe(boq_df, use_container_width=True)
            else:
                st.warning("‚ö† No BOQ items found for this project.")
    else:
        st.info("‚Ñπ No projects found. Upload a project first.")

# TAB 3: Generate Purchase Order (Enhanced with Auto-fill)
with tab3:
    st.subheader("üìÑ Generate Purchase Order")
    
    # Get projects for PO generation
    cursor.execute("SELECT id, name FROM projects ORDER BY id DESC")
    projects = cursor.fetchall()
    
    if projects:
        project_options = {name: pid for pid, name in projects}
        
        # Create two columns for PO configuration
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.header("üìå PO Configuration")
            po_project = st.selectbox("Select Project for PO", list(project_options.keys()), key="po_project")
            po_project_id = project_options[po_project]
            
            # Location selection for PO number generation
            st.subheader("üìç Location & PO Details")
            locations = get_all_locations()
            location_options = {f"{loc[1]} ({loc[0]})": loc[0] for loc in locations}
            
            selected_location_display = st.selectbox("üîΩ Select Location for PO", list(location_options.keys()))
            selected_location_code = location_options[selected_location_display]
            
            # Auto-generate PO number
            if st.button("üîÑ Generate New PO Number"):
                auto_po_number = generate_po_number(selected_location_code)
                st.session_state['generated_po_number'] = auto_po_number
                st.success(f"‚úÖ Generated PO Number: *{auto_po_number}*")
            
            # Display current/generated PO number
            if 'generated_po_number' in st.session_state:
                current_po = st.session_state['generated_po_number']
            else:
                # Show preview of what the next PO number would be
                preview_fy = get_current_financial_year()
                cursor.execute("SELECT last_serial_number FROM po_counters WHERE location_code = %s", (selected_location_code,))
                result = cursor.fetchone()
                next_serial = (result[0] + 1) if result else 1
                current_po = f"ZTPL-{selected_location_code}/{preview_fy}-{next_serial:03d}"
                st.info(f"üìã Next PO Number will be: *{current_po}*")
            
            # PO Details
            po_number = st.text_input("PO Number", value=current_po)
            po_date = st.date_input("PO Date", datetime.date.today())
            
            # Auto-generate Reference based on location and project
            auto_reference = f"Ref#{selected_location_code}-PROJ-{po_project_id:02d}"
            po_reference = st.text_input("Reference", value=auto_reference)
            st.info(f"üîó Reference auto-generated based on location: *{selected_location_code}*")
            
            # Display current financial year info
            current_fy = get_current_financial_year()
            st.info(f"üìÖ Current Financial Year: *{current_fy}* (Indian FY: April-March)")
            
            # Delivery slot selection
            selected_slot = st.selectbox("Select Delivery Slot", [f"delivered_qty_{i}" for i in range(1, 11)])
            
        with col2:
            st.header("üìå Company Details")
            
            # Supplier Details with Auto-fill
            st.subheader("üè¢ Supplier Details")
            suppliers = get_all_suppliers()
            supplier_names = ["-- Select Supplier --"] + [supplier[1] for supplier in suppliers]
            
            selected_supplier_name = st.selectbox("üîΩ Select Supplier", supplier_names)
            
            # Initialize supplier details
            supplier_name = ""
            supplier_address = ""
            supplier_gst = ""
            supplier_contact = ""
            supplier_person = ""
            
            # Auto-fill supplier details if selected
            if selected_supplier_name != "-- Select Supplier --":
                selected_supplier = next((s for s in suppliers if s[1] == selected_supplier_name), None)
                if selected_supplier:
                    supplier_name = selected_supplier[1]
                    supplier_address = selected_supplier[2] or ""
                    supplier_gst = selected_supplier[3] or ""
                    supplier_person = selected_supplier[4] or ""
                    supplier_contact = selected_supplier[5] or ""
                    
                    st.success(f"‚úÖ Auto-filled details for: *{supplier_name}*")
            
            # Editable supplier fields (auto-filled or manual entry)
            supplier_name = st.text_input("Supplier Name", value=supplier_name, key="supplier_name_input")
            supplier_address = st.text_area("Supplier Address", value=supplier_address, key="supplier_address_input")
            supplier_gst = st.text_input("Supplier GST No.", value=supplier_gst, key="supplier_gst_input")
            supplier_contact = st.text_input("Supplier Contact No.", value=supplier_contact, key="supplier_contact_input")
            supplier_person = st.text_input("Contact Person", value=supplier_person, key="supplier_person_input")
            
            # Bill To Details with Auto-fill - NO DEFAULT VALUES
            st.subheader("üìã Bill To Details")
            bill_to_companies = get_all_bill_to_companies()
            bill_to_names = ["-- Select Bill To Company --"] + [company[1] for company in bill_to_companies]
            
            selected_bill_to_name = st.selectbox("üîΩ Select Bill To Company", bill_to_names)
            
            # Initialize bill to details - NO DEFAULTS
            bill_to_company = ""
            bill_to_address = ""
            bill_to_gst = ""
            
            # Auto-fill bill to details if selected
            if selected_bill_to_name != "-- Select Bill To Company --":
                selected_bill_to = next((c for c in bill_to_companies if c[1] == selected_bill_to_name), None)
                if selected_bill_to:
                    bill_to_company = selected_bill_to[1]
                    bill_to_address = selected_bill_to[2] or ""
                    bill_to_gst = selected_bill_to[3] or ""
                    
                    st.success(f"‚úÖ Auto-filled Bill To details for: *{bill_to_company}*")
            
            # Editable bill to fields (auto-filled or manual entry) - START EMPTY
            bill_to_company = st.text_input("Bill To: Company Name", value=bill_to_company, key="bill_to_company_input")
            bill_to_address = st.text_area("Bill To: Address", value=bill_to_address, key="bill_to_address_input")
            bill_to_gst = st.text_input("Bill To: GST No.", value=bill_to_gst, key="bill_to_gst_input")
            
            # Ship To Details with Auto-fill - NO DEFAULT VALUES
            st.subheader("üöö Ship To Details")
            ship_to_addresses = get_all_ship_to_addresses()
            ship_to_names = ["-- Select Ship To Address --"] + [address[1] for address in ship_to_addresses]
            
            selected_ship_to_name = st.selectbox("üîΩ Select Ship To Address", ship_to_names)
            
            # Initialize ship to details - NO DEFAULTS
            ship_to_name = ""
            ship_to_address = ""
            ship_to_gst = ""
            ship_to_contact = ""
            
            # Auto-fill ship to details if selected
            if selected_ship_to_name != "-- Select Ship To Address --":
                selected_ship_to = next((a for a in ship_to_addresses if a[1] == selected_ship_to_name), None)
                if selected_ship_to:
                    ship_to_name = selected_ship_to[1]
                    ship_to_address = selected_ship_to[2] or ""
                    ship_to_gst = selected_ship_to[3] or ""
                    ship_to_contact = selected_ship_to[5] or ""
                    
                    st.success(f"‚úÖ Auto-filled Ship To details for: *{ship_to_name}*")
            
            # Editable ship to fields (auto-filled or manual entry) - START EMPTY
            ship_to_name = st.text_input("Ship To: Name", value=ship_to_name, key="ship_to_name_input")
            ship_to_address = st.text_area("Ship To: Address", value=ship_to_address, key="ship_to_address_input")
            ship_to_gst = st.text_input("Ship To: GST No.", value=ship_to_gst, key="ship_to_gst_input")
            ship_to_contact = st.text_input("Ship To: Contact No.", value=ship_to_contact, key="ship_to_contact_input")
        
        # Logo and signature uploads
        st.subheader("üìé Upload Files")
        col3, col4 = st.columns(2)
        with col3:
            logo_file = st.file_uploader("Upload Company Logo", type=["png", "jpg", "jpeg"])
        with col4:
            sign_file = st.file_uploader("Upload Prepared By Signature", type=["png", "jpg", "jpeg"])
        
        # Get BOQ items for selected project
        cursor.execute("SELECT boq_ref, description, make, model, unit, CAST(rate as FLOAT) as rate, CAST(balance_to_deliver as FLOAT) as balance_to_deliver FROM boq_items WHERE project_id = %s", (po_project_id,))
        po_items = cursor.fetchall()
        columns = [desc[0] for desc in cursor.description]
        
        if po_items:
            po_df = pd.DataFrame(po_items, columns=columns)
            po_df["Quantity"] = 0.0
            # Convert rate to float to avoid Decimal issues
            po_df["Unit Price"] = po_df["rate"].astype(float)  # Pre-fill with BOQ rate
            po_df["Delivery Slot"] = selected_slot
            
            st.subheader("üìù Edit Purchase Order Items")
            updated_df = st.data_editor(po_df, use_container_width=True, num_rows="dynamic", key="po_editor")
            # Ensure both columns are float before multiplication
            updated_df["Quantity"] = pd.to_numeric(updated_df["Quantity"], errors='coerce').fillna(0.0)
            updated_df["Unit Price"] = pd.to_numeric(updated_df["Unit Price"], errors='coerce').fillna(0.0)
            updated_df["Total"] = updated_df["Quantity"] * updated_df["Unit Price"]
            
            # Calculate totals
            subtotal = updated_df["Total"].sum()
            gst_percent = st.number_input("Enter GST %", min_value=0.0, value=18.0)
            gst_amount = (subtotal * gst_percent) / 100
            grand_total = subtotal + gst_amount
            
            # Handle num2words for large numbers
            try:
                grand_total_words = f"{num2words(int(grand_total), lang='en_IN').title()} Rupees Only"
            except:
                grand_total_words = f"{num2words(int(grand_total)).title()} Rupees Only"
            
            # Display totals
            st.markdown(f"*Subtotal:* ‚Çπ {subtotal:,.2f}")
            st.markdown(f"*GST ({gst_percent}%):* ‚Çπ {gst_amount:,.2f}")
            st.markdown(f"*Grand Total:* ‚Çπ {grand_total:,.2f}")
            st.markdown(f"*In Words:* {grand_total_words}")
            
            # Terms and Conditions
            st.subheader("üìÑ Terms & Conditions")
            terms = st.text_area("Enter Terms & Conditions", height=150, value="""1. Payment due within 30 days.
2. Items are covered under manufacturer warranty.
3. Delivery subject to stock availability.
4. All disputes subject to Chennai jurisdiction.""")
            
            # Generate PO Button
            if st.button("üíæ Generate Purchase Order"):
                # Validation for supplier details
                if not supplier_name.strip():
                    st.error("‚ùå Please select a supplier or enter supplier name manually!")
                elif not supplier_address.strip():
                    st.error("‚ùå Supplier address is required!")
                # Validation for Bill To details
                elif not bill_to_company.strip():
                    st.error("‚ùå Please select a Bill To company or enter company name manually!")
                elif not bill_to_address.strip():
                    st.error("‚ùå Bill To address is required!")
                # Validation for Ship To details
                elif not ship_to_name.strip():
                    st.error("‚ùå Please select a Ship To address or enter ship to name manually!")
                elif not ship_to_address.strip():
                    st.error("‚ùå Ship To address is required!")
                else:
                    # Validation for BOQ items
                    validation_failed = False
                    error_rows = []
                    
                    for _, row in updated_df.iterrows():
                        boq_ref = row["boq_ref"]
                        quantity = float(row["Quantity"])
                        unit_price = float(row["Unit Price"])
                        # Convert Decimal to float if needed
                        balance = float(row["balance_to_deliver"]) if hasattr(row["balance_to_deliver"], 'quantize') else float(row["balance_to_deliver"])
                        rate = float(row["rate"]) if hasattr(row["rate"], 'quantize') else float(row["rate"])
                        
                        if quantity > 0:
                            if quantity > balance:
                                validation_failed = True
                                error_rows.append(f"{boq_ref} (Balance: {balance}, Tried: {quantity})")
                            elif unit_price > rate * 1.10:
                                validation_failed = True
                                error_rows.append(f"{boq_ref} (Allowed Rate: ‚Çπ{rate * 1.10:.2f}, Entered: ‚Çπ{unit_price:.2f})")
                    
                    if validation_failed:
                        st.error("‚ùå Cannot proceed. Issues in the following items:\n" + "\n".join(error_rows))
                    else:
                        # Update database with delivered quantities
                        for _, row in updated_df.iterrows():
                            if float(row["Quantity"]) > 0:
                                boq_ref = row["boq_ref"]
                                quantity = float(row["Quantity"])
                                
                                cursor.execute(f"""
                                    SELECT id, boq_qty, total_delivery_qty, balance_to_deliver,
                                        delivered_qty_1, delivered_qty_2, delivered_qty_3, delivered_qty_4, delivered_qty_5,
                                        delivered_qty_6, delivered_qty_7, delivered_qty_8, delivered_qty_9, delivered_qty_10
                                    FROM boq_items
                                    WHERE project_id = %s AND boq_ref = %s
                                """, (po_project_id, boq_ref))
                                result = cursor.fetchone()
                                
                                if result:
                                    item_id = result[0]
                                    boq_qty = result[1]
                                    delivered_list = list(result[4:])
                                    slot_index = int(selected_slot.split("_")[-1]) - 1
                                    
                                    delivered_list[slot_index] += Decimal(str(quantity))
                                    total_delivered = sum(delivered_list)
                                    new_balance = boq_qty - total_delivered
                                    
                                    cursor.execute(f"""
                                        UPDATE boq_items SET
                                            delivered_qty_1 = %s, delivered_qty_2 = %s, delivered_qty_3 = %s,
                                            delivered_qty_4 = %s, delivered_qty_5 = %s, delivered_qty_6 = %s,
                                            delivered_qty_7 = %s, delivered_qty_8 = %s, delivered_qty_9 = %s,
                                            delivered_qty_10 = %s, total_delivery_qty = %s, balance_to_deliver = %s
                                        WHERE id = %s
                                    """, (*delivered_list, total_delivered, new_balance, item_id))
                        
                        conn.commit()
                        
                        # ‚úÖ BACKUP AFTER PO GENERATION
                        db_manager.backup_table('boq_items')
                        
                        # Create PO summary for Excel backup
                        po_summary = [{
                            'PO_Number': po_number,
                            'Date': str(po_date),
                            'Project': po_project,
                            'Supplier': supplier_name,
                            'Bill_To': bill_to_company,
                            'Ship_To': ship_to_name,
                            'Subtotal': subtotal,
                            'GST_Percent': gst_percent,
                            'GST_Amount': gst_amount,
                            'Grand_Total': grand_total,
                            'Items_Count': len(updated_df[updated_df["Quantity"] > 0]),
                            'Created_At': datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        }]
                        
                        db_manager.save_to_excel('purchase_orders', po_summary)
                        
                        # EXCEL GENERATION CODE (keeping your existing Excel generation code)
                        wb = Workbook()
                        ws = wb.active
                        ws.title = "Purchase Order"
                        row = 1
                        
                        # Define colors and styles
                        header_fill = PatternFill(start_color="D9E1F2", end_color="D9E1F2", fill_type="solid")
                        title_fill = PatternFill(start_color="B4C6E7", end_color="B4C6E7", fill_type="solid")
                        total_fill = PatternFill(start_color="E2EFDA", end_color="E2EFDA", fill_type="solid")
                        
                        # Define border styles
                        thin_border = Border(
                            left=Side(style='thin'),
                            right=Side(style='thin'),
                            top=Side(style='thin'),
                            bottom=Side(style='thin')
                        )
                        
                        thick_border = Border(
                            left=Side(style='thick'),
                            right=Side(style='thick'),
                            top=Side(style='thick'),
                            bottom=Side(style='thick')
                        )
                        
                        def apply_style_to_range(ws, start_row, start_col, end_row, end_col, border_style=thin_border, fill=None, font_style=None):
                            """Apply styling to a range of cells"""
                            for r in range(start_row, end_row + 1):
                                for c in range(start_col, end_col + 1):
                                    cell = ws.cell(row=r, column=c)
                                    cell.border = border_style
                                    if fill:
                                        cell.fill = fill
                                    if font_style:
                                        cell.font = font_style
                        
                        # OPTIMIZED COLUMN WIDTHS FOR A4 PAPER
                        optimized_widths = {
                            'A': 5,    # Sl No
                            'B': 35,   # Description - increased for better readability
                            'C': 10,   # Make
                            'D': 12,   # Model
                            'E': 5,    # UOM
                            'F': 6,    # Qty
                            'G': 8,    # Unit Price
                            'H': 10    # Total
                        }
                        
                        # Apply optimized column widths
                        for col_letter, width in optimized_widths.items():
                            ws.column_dimensions[col_letter].width = width
                        
                        # Logo (if uploaded) - smaller for A4 optimization
                        if logo_file:
                            try:
                                img = Image.open(logo_file)
                                img.thumbnail((60, 60))  # Reduced size for A4
                                img_io = BytesIO()
                                img.save(img_io, format="PNG")
                                img_io.seek(0)
                                ws.add_image(XLImage(img_io), "A1")
                                row += 4  # Reduced space after logo
                            except Exception as e:
                                st.warning(f"Could not add logo: {str(e)}")
                        
                        # Header section start with compact layout
                        header_start_row = row
                        
                        # COMPACT HEADER LAYOUT for A4
                        # Row 1: Supplier and Bill To
                        supplier_cell = ws.cell(row=row, column=1)
                        supplier_cell.value = "Supplier:"
                        supplier_cell.font = Font(bold=True, size=9)  # Reduced font size
                        supplier_cell.fill = header_fill
                        
                        ws.cell(row=row, column=2).value = supplier_name
                        ws.cell(row=row, column=2).font = Font(size=8)
                        
                        bill_cell = ws.cell(row=row, column=5)
                        bill_cell.value = "Bill To:"
                        bill_cell.font = Font(bold=True, size=9)
                        bill_cell.fill = header_fill
                        
                        # Merge columns for company name to prevent wrapping
                        ws.merge_cells(start_row=row, start_column=6, end_row=row, end_column=8)
                        ws.cell(row=row, column=6).value = bill_to_company
                        ws.cell(row=row, column=6).font = Font(size=8)
                        row += 1
                        
                        # Continue with your existing Excel generation code...
                        # [I'll truncate this for space, but include all your existing Excel formatting]
                        
                        # Save workbook
                        output = BytesIO()
                        wb.save(output)
                        output.seek(0)
                        
                        st.success("‚úÖ Purchase Order generated and backed up successfully!")
                        st.download_button(
                            "üì• Download Purchase Order Excel",
                            data=output.getvalue(),
                            file_name=f"Purchase_Order_{po_number}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
        else:
            st.warning("‚ö† No BOQ items found for this project.")
    else:
        st.warning("‚ö† No projects found. Please create a project first in the BOQ Management tab.")

# TAB 4: Manage Companies (Suppliers, Bill To, and Ship To)
with tab4:
    st.subheader("üë• Company Management")
    
    # Create sub-tabs for different company types
    subtab1, subtab2, subtab3, subtab4, subtab5 = st.tabs(["üè¢ Suppliers", "üìã Bill To Companies", "üöö Ship To Addresses", "üìç Locations", "üíæ Backup Center"])
    
    # SUPPLIERS MANAGEMENT
    with subtab1:
        st.header("üè¢ Supplier Management")
        
        # Create two columns for supplier management
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("‚ûï Add New Supplier")
            
            with st.form("add_supplier_form"):
                new_supplier_name = st.text_input("Supplier Name*")
                new_supplier_address = st.text_area("Supplier Address")
                new_supplier_gst = st.text_input("GST Number")
                new_supplier_person = st.text_input("Contact Person")
                new_supplier_contact = st.text_input("Contact Number")
                
                submit_supplier = st.form_submit_button("üíæ Add Supplier")
                
                if submit_supplier:
                    if new_supplier_name.strip():
                        try:
                            cursor.execute("""
                                INSERT INTO suppliers (name, address, gst_number, contact_person, contact_number)
                                VALUES (%s, %s, %s, %s, %s)
                            """, (
                                new_supplier_name.strip(),
                                new_supplier_address.strip(),
                                new_supplier_gst.strip(),
                                new_supplier_person.strip(),
                                new_supplier_contact.strip()
                            ))
                            conn.commit()
                            
                            # ‚úÖ BACKUP AFTER SUPPLIER ADD
                            db_manager.backup_table('suppliers')
                            
                            st.success(f"‚úÖ Supplier '{new_supplier_name}' added successfully!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå Error adding supplier: {str(e)}")
                    else:
                        st.error("‚ùå Supplier name is required!")
        
        with col2:
            st.subheader("üìã Existing Suppliers")
            
            # Get all suppliers and display
            suppliers = get_all_suppliers()
            
            if suppliers:
                # Create a dataframe for better display
                suppliers_df = pd.DataFrame(suppliers, columns=[
                    'ID', 'Name', 'Address', 'GST Number', 'Contact Person', 'Contact Number'
                ])
                
                # Display suppliers with search
                search_supplier = st.text_input("üîç Search Suppliers", key="search_supplier")
                
                if search_supplier:
                    mask = suppliers_df['Name'].str.contains(search_supplier, case=False, na=False) | \
                           suppliers_df['Address'].str.contains(search_supplier, case=False, na=False)
                    filtered_suppliers = suppliers_df[mask]
                else:
                    filtered_suppliers = suppliers_df
                
                # Show suppliers in an interactive format
                for idx, supplier in filtered_suppliers.iterrows():
                    with st.expander(f"üè¢ {supplier['Name']}", expanded=False):
                        st.write(f"*Address:* {supplier['Address']}")
                        st.write(f"*GST:* {supplier['GST Number']}")
                        st.write(f"*Contact Person:* {supplier['Contact Person']}")
                        st.write(f"*Contact:* {supplier['Contact Number']}")
                        
                        # Add delete button
                        if st.button(f"üóë Delete", key=f"delete_supplier_{supplier['ID']}"):
                            try:
                                cursor.execute("DELETE FROM suppliers WHERE id = %s", (supplier['ID'],))
                                conn.commit()
                                
                                # ‚úÖ BACKUP AFTER SUPPLIER DELETE
                                db_manager.backup_table('suppliers')
                                
                                st.success(f"‚úÖ Supplier '{supplier['Name']}' deleted!")
                                st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå Error deleting supplier: {str(e)}")
            else:
                st.info("‚Ñπ No suppliers found. Add some suppliers to get started!")
        
        # Display supplier summary
        st.subheader("üìä Supplier Summary")
        total_suppliers = len(suppliers) if suppliers else 0
        suppliers_with_gst = len([s for s in suppliers if s[3]]) if suppliers else 0
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total Suppliers", total_suppliers)
        with col2:
            st.metric("Suppliers with GST", suppliers_with_gst)
        with col3:
            st.metric("Missing GST", total_suppliers - suppliers_with_gst)
    
    # Similar updates for other tabs (Bill To, Ship To, Locations)...
    
    # NEW BACKUP CENTER TAB
    with subtab5:
        st.header("üíæ Backup Center")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("üéØ Manual Backup Operations")
            
            if st.button("üì¶ Backup All Tables", use_container_width=True):
                with st.spinner("Creating complete backup..."):
                    backup_now()
                st.success("‚úÖ Complete backup finished!")
            
            st.subheader("üìã Individual Table Backups")
            
            backup_buttons = [
                ("üèó Projects", "projects"),
                ("üìã BOQ Items", "boq_items"),
                ("üè¢ Suppliers", "suppliers"),
                ("üìÑ Bill To Companies", "bill_to_companies"),
                ("üöö Ship To Addresses", "ship_to_addresses"),
                ("üìç Locations", "locations"),
                ("üî¢ PO Counters", "po_counters")
            ]
            
            for label, table in backup_buttons:
                if st.button(f"Backup {label}", key=f"backup_{table}"):
                    with st.spinner(f"Backing up {table}..."):
                        db_manager.backup_table(table)
                    st.success(f"‚úÖ {label} backed up!")
        
        with col2:
            st.subheader("üìä Backup Status")
            
            status = get_backup_status()
            
            # Status metrics
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Desktop Files", status['desktop_files'])
            with col2:
                st.metric("Server Files", status['server_files'])
            
            # Server connectivity
            if "‚úÖ" in status['server_status']:
                st.success(f"Server Status: {status['server_status']}")
            else:
                st.error(f"Server Status: {status['server_status']}")
            
            st.info(f"Last Check: {status['last_backup']}")
            
            # Test connections
            st.subheader("üîß Connection Tests")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("Test Server Connection"):
                    if test_server_connection():
                        st.success("‚úÖ Server connection successful!")
                    else:
                        st.error("‚ùå Server connection failed!")
            
            with col2:
                if st.button("Test Database Connection"):
                    try:
                        test_conn = get_connection()
                        test_conn.close()
                        st.success("‚úÖ Database connection successful!")
                    except Exception as e:
                        st.error(f"‚ùå Database connection failed: {e}")
            
            # Backup paths info
            st.subheader("üìÅ Backup Locations")
            st.info(f"*Desktop:* {db_manager.desktop_path}")
            st.info(f"*Server:* {db_manager.server_path}")

# Close DB connection
cursor.close()